import sqlite3
from aiogram import Dispatcher, html, Bot
from presentation import keyboards as kb
from presentation.messages import START_MESSAGE
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from app.config import cakes, T_BANK_PHOTO_URL, ADMIN_CHAT_ID, TOKEN
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from random import randint
from infrastructure.database import BotDatabase


class OrderCakeState(StatesGroup):
    waiting_for_quantity = State()


async def command_start_handler(message: Message):
    await message.answer(START_MESSAGE, reply_markup=kb.start)

async def list_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í–æ—Ç –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π:", reply_markup=await kb.list_menu())

async def paginate_menu_callback(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await callback.message.edit_text("–í–æ—Ç –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π:", reply_markup=await kb.list_menu(page))

async def view_cake_callback(callback: CallbackQuery):
    cake_index = int(callback.data.split("_")[-1])
    cake = cakes[cake_index]
    await callback.message.edit_text(f"{html.bold("–ù–∞–∑–≤–∞–Ω–∏–µ")}: {cake["name"]}\n{html.bold(f"–¶–µ–Ω–∞ –∑–∞ {cake["per"]}:")} {cake["price"]} —Ä—É–±", reply_markup=await kb.view_cake(cake_index))

async def back_to_start_callback(callback: CallbackQuery):
    await callback.message.edit_text(START_MESSAGE , reply_markup=kb.start)

async def order_unpaid_callback(callback: CallbackQuery):
    db = BotDatabase()
    order_id = int(callback.data[-5:])

    db.update_order_status(order_id, False)
    
    new_status = False 

    await callback.message.edit_reply_markup(reply_markup=await kb.order_status(new_status, order_id))

async def order_paid_callback(callback: CallbackQuery):
    db = BotDatabase()
    order_id = int(callback.data[-5:])

    db.update_order_status(order_id, True)
    
    new_status = True 

    await callback.message.edit_reply_markup(reply_markup=await kb.order_status(new_status, order_id))

async def order_cake_callback(callback: CallbackQuery, state: FSMContext):
    cake_index = int(callback.data.split("_")[-1])
    cake = cakes[cake_index]

    await state.update_data(cake_index=cake_index)

    if cake["per"] == "—à—Ç":
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç):")
    else:
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å—É (–∫–≥):")

    await state.set_state(OrderCakeState.waiting_for_quantity)


bot = Bot(token=TOKEN)

async def process_quantity(message: Message, state: FSMContext):
    db = BotDatabase()
    user_data = await state.get_data()
    cake_index = user_data.get("cake_index")

    cake = cakes[cake_index]

    try:
        quantity = float(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    cake_name = cake["name"]
    price = cake["price"]
    total_price = quantity * price

    while True: 
        order_id = randint(10000, 99999)
        try:
            db.add_order((order_id, f"{message.from_user.full_name}", cake_name, int(quantity), total_price, False))
            break  
        except sqlite3.IntegrityError:
            continue  

    description = (f"üõí {html.bold('–í–∞—à –∑–∞–∫–∞–∑:')}\n"
                   f"üì¶ {html.bold('–ù–∞–∑–≤–∞–Ω–∏–µ')}: {cake_name}\n"
                   f"üí∞ {html.bold(f'–¶–µ–Ω–∞ –∑–∞ {cake['per']}')}: {price} —Ä—É–±\n"
                   f"üìè {html.bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')}: {quantity} {cake['per']}\n\n"
                   f"üíµ {html.bold('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')}: {total_price} —Ä—É–±\n\n"
                   f"{html.bold(f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üÜî {order_id}:')} +79017150031 - –¢-–ë–∞–Ω–∫ üü°‚ö´")

    await message.answer_photo(T_BANK_PHOTO_URL, description)

    admin_message = (f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
                     f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: [{message.from_user.full_name}](tg://user?id={message.from_user.id})\n"
                     f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {cake_name}\n"
                     f"üí∞ *–¶–µ–Ω–∞ –∑–∞ {cake['per']}*: {price} —Ä—É–±\n"
                     f"üìè *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ*: {quantity} {cake['per']}\n"
                     f"üíµ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å*: {total_price} —Ä—É–±\n"
                     f"üÜî *ID –∑–∞–∫–∞–∑–∞*: {order_id}")

    await bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode="Markdown", reply_markup=await kb.order_status(False, order_id))

    await state.clear()

        

def register_handlers(dp: Dispatcher):
    dp.message.register(command_start_handler, CommandStart())
    dp.callback_query.register(list_menu_callback, lambda c : c.data == "list_menu")
    dp.callback_query.register(back_to_start_callback, lambda c: c.data == "back_to_start")
    dp.callback_query.register(paginate_menu_callback, lambda c: c.data.startswith("menu_page_"))
    dp.callback_query.register(view_cake_callback, lambda c: c.data.startswith("view_cake_"))
    dp.callback_query.register(order_cake_callback, lambda c: c.data.startswith("order_cake_"))
    dp.callback_query.register(order_paid_callback, lambda c: c.data.startswith("order_paid_"))
    dp.callback_query.register(order_unpaid_callback, lambda c: c.data.startswith("order_unpaid_"))


    dp.message.register(process_quantity, StateFilter(OrderCakeState.waiting_for_quantity))