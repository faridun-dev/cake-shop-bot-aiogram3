# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import sqlite3

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ aiogram
from aiogram import Dispatcher, html, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ presentation
from presentation import keyboards as kb
from presentation.messages import START_MESSAGE

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from app.config import cakes, T_BANK_PHOTO_URL, ADMIN_CHAT_ID, TOKEN

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from infrastructure.database import BotDatabase

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
from random import randint


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ—Ä—Ç–∞
class OrderCakeState(StatesGroup):
    waiting_for_quantity = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def command_start_handler(message: Message):
    await message.answer(START_MESSAGE, reply_markup=kb.start)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
async def list_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í–æ—Ç –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π:", reply_markup=await kb.list_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def paginate_menu_callback(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await callback.message.edit_text("–í–æ—Ç –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π:", reply_markup=await kb.list_menu(page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
async def view_cake_callback(callback: CallbackQuery):
    cake_index = int(callback.data.split("_")[-1])
    cake = cakes[cake_index]
    await callback.message.edit_text(
        f"{html.bold('–ù–∞–∑–≤–∞–Ω–∏–µ')}: {cake['name']}\n{html.bold(f'–¶–µ–Ω–∞ –∑–∞ {cake['per']}')}: {cake['price']} —Ä—É–±",
        reply_markup=await kb.view_cake(cake_index)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
async def back_to_start_callback(callback: CallbackQuery):
    await callback.message.edit_text(START_MESSAGE , reply_markup=kb.start)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –æ–ø–ª–∞—á–µ–Ω" ‚Äî –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
async def order_unpaid_callback(callback: CallbackQuery):
    db = BotDatabase()
    order_id = int(callback.data[-5:])

    db.update_order_status(order_id, False)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ

    new_status = False 
    await callback.message.edit_reply_markup(reply_markup=await kb.order_status(new_status, order_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—á–µ–Ω" ‚Äî –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–ø–ª–∞—á–µ–Ω
async def order_paid_callback(callback: CallbackQuery):
    db = BotDatabase()
    order_id = int(callback.data[-5:])

    db.update_order_status(order_id, True)

    new_status = True 
    await callback.message.edit_reply_markup(reply_markup=await kb.order_status(new_status, order_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–∫–∞–∑–∞—Ç—å")
async def order_cake_callback(callback: CallbackQuery, state: FSMContext):
    cake_index = int(callback.data.split("_")[-1])
    cake = cakes[cake_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(cake_index=cake_index)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if cake["per"] == "—à—Ç":
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç):")
    else:
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å—É (–∫–≥):")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.set_state(OrderCakeState.waiting_for_quantity)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def process_quantity(message: Message, state: FSMContext):
    db = BotDatabase()
    user_data = await state.get_data()
    cake_index = user_data.get("cake_index")
    cake = cakes[cake_index]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
    try:
        quantity = float(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    # –ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    cake_name = cake["name"]
    price = cake["price"]
    total_price = quantity * price

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
    while True: 
        order_id = randint(10000, 99999)
        try:
            db.add_order((order_id, f"{message.from_user.full_name}", cake_name, int(quantity), total_price, False))
            break  # –ï—Å–ª–∏ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except sqlite3.IntegrityError:
            continue  # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    description = (
        f"üõí {html.bold('–í–∞—à –∑–∞–∫–∞–∑:')}\n"
        f"üì¶ {html.bold('–ù–∞–∑–≤–∞–Ω–∏–µ')}: {cake_name}\n"
        f"üí∞ {html.bold(f'–¶–µ–Ω–∞ –∑–∞ {cake['per']}')}: {price} —Ä—É–±\n"
        f"üìè {html.bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')}: {quantity} {cake['per']}\n\n"
        f"üíµ {html.bold('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')}: {total_price} —Ä—É–±\n\n"
        f"{html.bold(f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üÜî {order_id}:')} +79017150031 - –¢-–ë–∞–Ω–∫ üü°‚ö´"
    )

    await message.answer_photo(T_BANK_PHOTO_URL, description)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    admin_message = (
        f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: [{message.from_user.full_name}](tg://user?id={message.from_user.id})\n"
        f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {cake_name}\n"
        f"üí∞ *–¶–µ–Ω–∞ –∑–∞ {cake['per']}*: {price} —Ä—É–±\n"
        f"üìè *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ*: {quantity} {cake['per']}\n"
        f"üíµ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å*: {total_price} —Ä—É–±\n"
        f"üÜî *ID –∑–∞–∫–∞–∑–∞*: {order_id}"
    )

    await bot.send_message(
        ADMIN_CHAT_ID,
        admin_message,
        parse_mode="Markdown",
        reply_markup=await kb.order_status(False, order_id)
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp: Dispatcher):
    dp.message.register(command_start_handler, CommandStart())
    dp.callback_query.register(list_menu_callback, lambda c : c.data == "list_menu")
    dp.callback_query.register(back_to_start_callback, lambda c: c.data == "back_to_start")
    dp.callback_query.register(paginate_menu_callback, lambda c: c.data.startswith("menu_page_"))
    dp.callback_query.register(view_cake_callback, lambda c: c.data.startswith("view_cake_"))
    dp.callback_query.register(order_cake_callback, lambda c: c.data.startswith("order_cake_"))
    dp.callback_query.register(order_paid_callback, lambda c: c.data.startswith("order_paid_"))
    dp.callback_query.register(order_unpaid_callback, lambda c: c.data.startswith("order_unpaid_"))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    dp.message.register(process_quantity, StateFilter(OrderCakeState.waiting_for_quantity))
